// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           Role
  projects       Project[]
  orgs           Org[]
  tokens         Token[]
  sessions       Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  // type        String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
enum TokenType {
  RESET_PASSWORD
}

model Project {
  id                Int           @id @default(autoincrement())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  name              String
  description       String
  projecimpacts     String
  projectoutcomes   String
  projectindicators String
  beneficiaries     Beneficiary[]
  user              User?         @relation(fields: [userId], references: [id])
  userId            Int?
  org               Org?          @relation(fields: [orgId], references: [id])
  orgId             Int?
}

model Org {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  url        String
  plan       String
  planStatus String
  projects   Project[]
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
}

model Beneficiary {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  demographics Demographic[]
  project      Project?      @relation(fields: [projectId], references: [id])
  projectId    Int?
}

model Demographic {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  name          String
  beneficiary   Beneficiary? @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId Int?
}

enum Role {
  ADMIN
  ORGANIZATION_OWNER
  PROJECT_OWNER
  PROJECT_MANAGER
  COLLABORATOR
  GUEST_VIEW
  USER
}
