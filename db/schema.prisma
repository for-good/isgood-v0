generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  userId             Int?
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               user?     @relation(fields: [userId], references: [id])
}

model beneficiary {
  id                                Int                                 @id @default(autoincrement())
  name                              String
  lifeChange                        String?
  importHash                        String?
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime
  deletedAt                         DateTime?
  beneficiaryDemographicDemographic beneficiaryDemographicDemographic[]
  projectBeneficiaryBeneficiary     projectBeneficiaryBeneficiary[]
}

model beneficiaryDemographicDemographic {
  id            Int         @id @default(autoincrement())
  beneficiaryId Int
  demographicId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  beneficiary   beneficiary @relation(fields: [beneficiaryId], references: [id])
  demographic   demographic @relation(fields: [demographicId], references: [id])
}

model demographic {
  id                                Int                                 @id @default(autoincrement())
  name                              String?
  fieldType                         String?
  value                             String?
  operator                          String?
  importHash                        String?
  createdAt                         DateTime                            @default(now())
  updatedAt                         DateTime
  deletedAt                         DateTime?
  beneficiaryDemographicDemographic beneficiaryDemographicDemographic[]
}

model org {
  id                         Int       @id @default(autoincrement())
  name                       String
  url                        String    @unique
  plan                       String
  planStatus                 String    @default("active")
  planStripeCustomerId       String?
  planUserId                 String?
  status                     String
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime
  deletedAt                  DateTime?
  createdById                Int
  updatedById                Int
  user_org_createdByIdTouser user      @relation("org_createdByIdTouser", fields: [createdById], references: [id])
  user_org_updatedByIdTouser user      @relation("org_updatedByIdTouser", fields: [updatedById], references: [id])
  orgUser                    orgUser[]
  project                    project[]
}

model orgUser {
  id                                   Int                     @id @default(autoincrement())
  orgId                                Int?
  userId                               Int
  roles                                Role                    @default(ORGANIZATION_OWNER)
  invitationToken                      String?
  status                               String
  createdAt                            DateTime                @default(now())
  updatedAt                            DateTime
  statusDeactivatedAt                  Int
  org                                  org?                    @relation(fields: [orgId], references: [id])
  user                                 user                    @relation(fields: [userId], references: [id])
  orgUserProjectProject                orgUserProjectProject[]
  project_orgUserToproject_createdById project[]               @relation("orgUserToproject_createdById")
  project_orgUserToproject_updatedById project[]               @relation("orgUserToproject_updatedById")
}

model orgUserProjectProject {
  id                                     Int      @id @default(autoincrement())
  orgUser                                Int
  projectId                              Int
  orgUserRole                            Role     @default(PROJECT_OWNER)
  createdAt                              DateTime @default(now())
  updatedAt                              DateTime
  orgUser_orgUserToorgUserProjectProject orgUser  @relation(fields: [orgUser], references: [id])
  project                                project  @relation(fields: [projectId], references: [id])
}

model project {
  id                                   Int                              @id @default(autoincrement())
  name                                 String
  description                          String
  impacts                              String
  outcomes                             String
  geolocation                          String
  startDate                            DateTime
  endDate                              DateTime
  importHash                           String?
  createdAt                            DateTime                         @default(now())
  updatedAt                            DateTime
  deletedAt                            DateTime?
  orgId                                Int?
  createdById                          Int?
  updatedById                          Int?
  orgUser_orgUserToproject_createdById orgUser?                         @relation("orgUserToproject_createdById", fields: [createdById], references: [id])
  org                                  org?                             @relation(fields: [orgId], references: [id])
  orgUser_orgUserToproject_updatedById orgUser?                         @relation("orgUserToproject_updatedById", fields: [updatedById], references: [id])
  orgUserProjectProject                orgUserProjectProject[]
  projectBeneficiaryBeneficiary        projectBeneficiaryBeneficiary[]
  projectIndicatorProjectProject       projectIndicatorProjectProject[]
}

model projectBeneficiaryBeneficiary {
  id            Int         @id @default(autoincrement())
  projectId     Int
  beneficiaryId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  beneficiary   beneficiary @relation(fields: [beneficiaryId], references: [id])
  project       project     @relation(fields: [projectId], references: [id])
}

model projectIndicatorProjectProject {
  id                 Int               @id @default(autoincrement())
  projectId          Int
  projectIndicatorId Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  project            project           @relation(fields: [projectId], references: [id])
  projectIndicators  projectIndicators @relation(fields: [projectIndicatorId], references: [id])
}

model projectIndicators {
  id                             Int                              @id @default(autoincrement())
  indicatorId                    String?
  importHash                     String?
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime
  deletedAt                      DateTime?
  projectIndicatorProjectProject projectIndicatorProjectProject[]
}

model user {
  id                          Int       @id @default(autoincrement())
  firstName                   String
  lastName                    String
  hashedPassword              String
  status                      String
  emailVerified               Boolean?  @default(false)
  emailVerificationToken      String?   @unique
  emailVerificationExpiresAt  DateTime?
  passwordResetToken          String?
  passwordResetTokenExpiresAt DateTime?
  fullName                    String
  phoneNumber                 String?
  email                       String    @unique
  jwtTokenInvalidBefore       DateTime?
  importHash                  String?   @unique
  createdAt                   DateTime  @default(now())
  deletedAt                   DateTime?
  updatedAt                   DateTime
  roles                       Role      @default(ADMIN)
  Session                     Session[]
  org_org_createdByIdTouser   org[]     @relation("org_createdByIdTouser")
  org_org_updatedByIdTouser   org[]     @relation("org_updatedByIdTouser")
  orgUser                     orgUser[]
}

enum Role {
  ADMIN
  ORGANIZATION_OWNER
  PROJECT_OWNER
  PROJECT_MANAGER
  COLLABORATOR
  GUEST_VIEW
}
